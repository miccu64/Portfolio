
Zegarek.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000005be  00000652  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800106  00800106  00000658  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000688  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d4c  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000769  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000769  00000000  00000000  00001bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00002338  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048c  00000000  00000000  0000240c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ad  00000000  00000000  00002898  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00003045  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 45 00 	jmp	0x8a	; 0x8a <__ctors_end>
   4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  10:	0c 94 4a 02 	jmp	0x494	; 0x494 <__vector_4>
  14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  54:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  58:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  5c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  60:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  68:	6e 00       	.word	0x006e	; ????
  6a:	70 00       	.word	0x0070	; ????
  6c:	72 00       	.word	0x0072	; ????
  6e:	74 00       	.word	0x0074	; ????
  70:	76 00       	.word	0x0076	; ????
  72:	78 00       	.word	0x0078	; ????
  74:	7a 00       	.word	0x007a	; ????
  76:	7c 00       	.word	0x007c	; ????
  78:	7e 00       	.word	0x007e	; ????
  7a:	a4 00       	.word	0x00a4	; ????
  7c:	af 00       	.word	0x00af	; ????
  7e:	ba 00       	.word	0x00ba	; ????
  80:	c5 00       	.word	0x00c5	; ????
  82:	d0 00       	.word	0x00d0	; ????
  84:	db 00       	.word	0x00db	; ????
  86:	e6 00       	.word	0x00e6	; ????
  88:	f1 00       	.word	0x00f1	; ????

0000008a <__ctors_end>:
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf ef       	ldi	r28, 0xFF	; 255
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
  96:	11 e0       	ldi	r17, 0x01	; 1
  98:	a0 e0       	ldi	r26, 0x00	; 0
  9a:	b1 e0       	ldi	r27, 0x01	; 1
  9c:	ee eb       	ldi	r30, 0xBE	; 190
  9e:	f5 e0       	ldi	r31, 0x05	; 5
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
  a2:	05 90       	lpm	r0, Z+
  a4:	0d 92       	st	X+, r0
  a6:	a6 30       	cpi	r26, 0x06	; 6
  a8:	b1 07       	cpc	r27, r17
  aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	a6 e0       	ldi	r26, 0x06	; 6
  b0:	b1 e0       	ldi	r27, 0x01	; 1
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	a6 31       	cpi	r26, 0x16	; 22
  b8:	b2 07       	cpc	r27, r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <main>
  c0:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <_exit>

000000c4 <__bad_interrupt>:
  c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <wyborLiczby>:

//case'y do wybrania wyswietlanego znaku na wyswietlaczu
unsigned char wyborLiczby(unsigned char cyfra)
{
	unsigned char wynik;
	switch(cyfra)
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	fc 01       	movw	r30, r24
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	e9 30       	cpi	r30, 0x09	; 9
  d0:	f1 05       	cpc	r31, r1
  d2:	b0 f4       	brcc	.+44     	; 0x100 <wyborLiczby+0x38>
  d4:	ec 5c       	subi	r30, 0xCC	; 204
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__tablejump2__>
	{
		case 0:
		wynik=0x7e;
		break;
		case 1:
		wynik=0x30;
  dc:	80 e3       	ldi	r24, 0x30	; 48
  de:	08 95       	ret
		break;
		case 2:
		wynik=0x6d;
  e0:	8d e6       	ldi	r24, 0x6D	; 109
		break;
  e2:	08 95       	ret
		case 3:
		wynik=0x79;
  e4:	89 e7       	ldi	r24, 0x79	; 121
		break;
  e6:	08 95       	ret
		case 4:
		wynik=0x33;
  e8:	83 e3       	ldi	r24, 0x33	; 51
		break;
  ea:	08 95       	ret
		case 5:
		wynik=0x5b;
  ec:	8b e5       	ldi	r24, 0x5B	; 91
		break;
  ee:	08 95       	ret
		case 6:
		wynik=0x5f;
  f0:	8f e5       	ldi	r24, 0x5F	; 95
		break;
  f2:	08 95       	ret
		case 7:
		wynik=0x70;
  f4:	80 e7       	ldi	r24, 0x70	; 112
		break;
  f6:	08 95       	ret
		case 8:
		wynik=0x7f;
  f8:	8f e7       	ldi	r24, 0x7F	; 127
		break;
  fa:	08 95       	ret
		case 9:
		wynik=0x7b;
  fc:	8b e7       	ldi	r24, 0x7B	; 123
		break;
  fe:	08 95       	ret
{
	unsigned char wynik;
	switch(cyfra)
	{
		case 0:
		wynik=0x7e;
 100:	8e e7       	ldi	r24, 0x7E	; 126
		default:
		wynik=0x7e;//domyslnie 0
		break;
	}
	return wynik;
}
 102:	08 95       	ret

00000104 <wyswietlacz>:

//do dzielenia bitow miedzy B i D
unsigned int wyswietlacz(unsigned char nrwysw, unsigned char cyfra)
{
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
 108:	86 2f       	mov	r24, r22
	unsigned char wynik,pomoc,doD,doB;//doD - do PORTD, doB - do PORTB
	unsigned int polaczone;//polaczone - laczymy PORTD i PORTB, zeby funkcja mogla zwrocic 2 wartosci na raz
	wynik=wyborLiczby(cyfra);//wybiera liczbe
 10a:	0e 94 64 00 	call	0xc8	; 0xc8 <wyborLiczby>
	doB=nrwysw;
	doD=(wynik<<2);//trzeba przesunac, bo to 0 i 1 sa tx i rx
 10e:	28 2f       	mov	r18, r24
 110:	22 0f       	add	r18, r18
 112:	22 0f       	add	r18, r18
	//negacje musza wystapic by swiecilo
	doD=~doD;
	pomoc=~wynik;
 114:	80 95       	com	r24
	pomoc=(pomoc>>6);//do portb chcemy wyslac tylko 2 bity
	doB=doB | pomoc;
	polaczone=(doB<<8);
 116:	82 95       	swap	r24
 118:	86 95       	lsr	r24
 11a:	86 95       	lsr	r24
 11c:	83 70       	andi	r24, 0x03	; 3
 11e:	c8 2b       	or	r28, r24
 120:	8c 2f       	mov	r24, r28
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	98 2f       	mov	r25, r24
 126:	88 27       	eor	r24, r24
	polaczone=polaczone+doD;
	return polaczone;
 128:	20 95       	com	r18
}
 12a:	82 0f       	add	r24, r18
 12c:	91 1d       	adc	r25, r1
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <wyslanieNaPort>:

//dzieli z funkcji polaczone wartosci na port D i B
void wyslanieNaPort(unsigned char nrWysw)
{
	unsigned int polaczone;
	switch(nrWysw)
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	fc 01       	movw	r30, r24
 136:	31 97       	sbiw	r30, 0x01	; 1
 138:	e8 30       	cpi	r30, 0x08	; 8
 13a:	f1 05       	cpc	r31, r1
 13c:	08 f0       	brcs	.+2      	; 0x140 <wyslanieNaPort+0xe>
 13e:	5b c0       	rjmp	.+182    	; 0x1f6 <wyslanieNaPort+0xc4>
 140:	e3 5c       	subi	r30, 0xC3	; 195
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__tablejump2__>
	{
		case 1:
		polaczone=wyswietlacz(wyswg1,godzina1);
 148:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <godzina1>
 14c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <wyswg1>
 150:	0e 94 82 00 	call	0x104	; 0x104 <wyswietlacz>
		doDg1=polaczone & 0xff;
 154:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <doDg1>
		doBg1=(polaczone>>8) & 0xff;
 158:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <doBg1>
		break;
 15c:	08 95       	ret
		case 2:
		polaczone=wyswietlacz(wyswg2,godzina2);
 15e:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <godzina2>
 162:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <wyswg2>
 166:	0e 94 82 00 	call	0x104	; 0x104 <wyswietlacz>
		doDg2=polaczone & 0xff;
 16a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <doDg2>
		doBg2=(polaczone>>8) & 0xff;
 16e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <__data_end>
		break;
 172:	08 95       	ret
		case 3:
		polaczone=wyswietlacz(wyswm1,minuta1);
 174:	60 91 07 01 	lds	r22, 0x0107	; 0x800107 <minuta1>
 178:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <wyswm1>
 17c:	0e 94 82 00 	call	0x104	; 0x104 <wyswietlacz>
		doDm1=polaczone & 0xff;
 180:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <doDm1>
		doBm1=(polaczone>>8) & 0xff;
 184:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <doBm1>
		break;
 188:	08 95       	ret
		case 4:
		polaczone=wyswietlacz(wyswm2,minuta2);
 18a:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <minuta2>
 18e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 192:	0e 94 82 00 	call	0x104	; 0x104 <wyswietlacz>
		doDm2=polaczone & 0xff;
 196:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <doDm2>
		doBm2=(polaczone>>8) & 0xff;
 19a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <doBm2>
		break;
 19e:	08 95       	ret
		case 5:
		polaczone=wyswietlacz(wyswg1,sekunda1);
 1a0:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <sekunda1>
 1a4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <wyswg1>
 1a8:	0e 94 82 00 	call	0x104	; 0x104 <wyswietlacz>
		doDg1=polaczone & 0xff;
 1ac:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <doDg1>
		doBg1=(polaczone>>8) & 0xff;
 1b0:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <doBg1>
		break;
 1b4:	08 95       	ret
		case 6:
		polaczone=wyswietlacz(wyswg2,sekunda2);
 1b6:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <sekunda2>
 1ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <wyswg2>
 1be:	0e 94 82 00 	call	0x104	; 0x104 <wyswietlacz>
		doDg2=polaczone & 0xff;
 1c2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <doDg2>
		doBg2=(polaczone>>8) & 0xff;
 1c6:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <__data_end>
		break;
 1ca:	08 95       	ret
		case 7:
		polaczone=wyswietlacz(wyswm1,setna1);
 1cc:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <setna1>
 1d0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <wyswm1>
 1d4:	0e 94 82 00 	call	0x104	; 0x104 <wyswietlacz>
		doDm1=polaczone & 0xff;
 1d8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <doDm1>
		doBm1=(polaczone>>8) & 0xff;
 1dc:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <doBm1>
		break;
 1e0:	08 95       	ret
		case 8:
		polaczone=wyswietlacz(wyswm2,setna2);
 1e2:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <setna2>
 1e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1ea:	0e 94 82 00 	call	0x104	; 0x104 <wyswietlacz>
		doDm2=polaczone & 0xff;
 1ee:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <doDm2>
		doBm2=(polaczone>>8) & 0xff;
 1f2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <doBm2>
 1f6:	08 95       	ret

000001f8 <wyswietlaj>:
}

//wyswietlaj - wysyla 6 bitow do D i 2 do B
void wyswietlaj()
{
	PORTB=doBg1;
 1f8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <doBg1>
 1fc:	85 b9       	out	0x05, r24	; 5
	PORTD=doDg1;
 1fe:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <doDg1>
 202:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	8f e3       	ldi	r24, 0x3F	; 63
 206:	9f e1       	ldi	r25, 0x1F	; 31
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <wyswietlaj+0x10>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <wyswietlaj+0x16>
 20e:	00 00       	nop
	_delay_ms(2);
	PORTB=doBg2;
 210:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 214:	85 b9       	out	0x05, r24	; 5
	PORTD=doDg2;
 216:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <doDg2>
 21a:	8b b9       	out	0x0b, r24	; 11
	if (setna1>=5)
 21c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <setna1>
 220:	85 30       	cpi	r24, 0x05	; 5
 222:	18 f0       	brcs	.+6      	; 0x22a <wyswietlaj+0x32>
	PORTB&=0b111101;//migajaca kropka
 224:	85 b1       	in	r24, 0x05	; 5
 226:	8d 73       	andi	r24, 0x3D	; 61
 228:	85 b9       	out	0x05, r24	; 5
 22a:	8f ed       	ldi	r24, 0xDF	; 223
 22c:	9e e2       	ldi	r25, 0x2E	; 46
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <wyswietlaj+0x36>
 232:	00 c0       	rjmp	.+0      	; 0x234 <wyswietlaj+0x3c>
 234:	00 00       	nop
	_delay_ms(3);
	PORTB=doBm1;
 236:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <doBm1>
 23a:	85 b9       	out	0x05, r24	; 5
	PORTD=doDm1;
 23c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <doDm1>
 240:	8b b9       	out	0x0b, r24	; 11
 242:	8f e3       	ldi	r24, 0x3F	; 63
 244:	9f e1       	ldi	r25, 0x1F	; 31
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <wyswietlaj+0x4e>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <wyswietlaj+0x54>
 24c:	00 00       	nop
	_delay_ms(2);
	PORTB=doBm2;
 24e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <doBm2>
 252:	85 b9       	out	0x05, r24	; 5
	PORTD=doDm2;
 254:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <doDm2>
 258:	8b b9       	out	0x0b, r24	; 11
 25a:	8f ed       	ldi	r24, 0xDF	; 223
 25c:	9e e2       	ldi	r25, 0x2E	; 46
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <wyswietlaj+0x66>
 262:	00 c0       	rjmp	.+0      	; 0x264 <wyswietlaj+0x6c>
 264:	00 00       	nop
 266:	08 95       	ret

00000268 <wyswietlajZmiana>:
	return;
}

//to co wyswietlaj, ale bez migajacej kropki i z lekkim opoznieniem aby za szybko nie zmienialo liczb
void wyswietlajZmiana()
{
 268:	9a e0       	ldi	r25, 0x0A	; 10
	for (unsigned char i=1;i<=10;i++)
	{
		PORTB=doBg1;
 26a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <doBg1>
 26e:	85 b9       	out	0x05, r24	; 5
		PORTD=doDg1;
 270:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <doDg1>
 274:	8b b9       	out	0x0b, r24	; 11
 276:	ef e3       	ldi	r30, 0x3F	; 63
 278:	ff e1       	ldi	r31, 0x1F	; 31
 27a:	31 97       	sbiw	r30, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <wyswietlajZmiana+0x12>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <wyswietlajZmiana+0x18>
 280:	00 00       	nop
		_delay_ms(2);
		PORTB=doBg2;
 282:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 286:	85 b9       	out	0x05, r24	; 5
		PORTD=doDg2;
 288:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <doDg2>
 28c:	8b b9       	out	0x0b, r24	; 11
		PORTB&=0b111101;//kropka
 28e:	85 b1       	in	r24, 0x05	; 5
 290:	8d 73       	andi	r24, 0x3D	; 61
 292:	85 b9       	out	0x05, r24	; 5
 294:	ef ed       	ldi	r30, 0xDF	; 223
 296:	fe e2       	ldi	r31, 0x2E	; 46
 298:	31 97       	sbiw	r30, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <wyswietlajZmiana+0x30>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <wyswietlajZmiana+0x36>
 29e:	00 00       	nop
		_delay_ms(3);
		PORTB=doBm1;
 2a0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <doBm1>
 2a4:	85 b9       	out	0x05, r24	; 5
		PORTD=doDm1;
 2a6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <doDm1>
 2aa:	8b b9       	out	0x0b, r24	; 11
 2ac:	ef e3       	ldi	r30, 0x3F	; 63
 2ae:	ff e1       	ldi	r31, 0x1F	; 31
 2b0:	31 97       	sbiw	r30, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <wyswietlajZmiana+0x48>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <wyswietlajZmiana+0x4e>
 2b6:	00 00       	nop
		_delay_ms(2);
		PORTB=doBm2;
 2b8:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <doBm2>
 2bc:	85 b9       	out	0x05, r24	; 5
		PORTD=doDm2;
 2be:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <doDm2>
 2c2:	8b b9       	out	0x0b, r24	; 11
 2c4:	ef ed       	ldi	r30, 0xDF	; 223
 2c6:	fe e2       	ldi	r31, 0x2E	; 46
 2c8:	31 97       	sbiw	r30, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <wyswietlajZmiana+0x60>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <wyswietlajZmiana+0x66>
 2ce:	00 00       	nop
 2d0:	91 50       	subi	r25, 0x01	; 1
}

//to co wyswietlaj, ale bez migajacej kropki i z lekkim opoznieniem aby za szybko nie zmienialo liczb
void wyswietlajZmiana()
{
	for (unsigned char i=1;i<=10;i++)
 2d2:	59 f6       	brne	.-106    	; 0x26a <wyswietlajZmiana+0x2>
		PORTB=doBm2;
		PORTD=doDm2;
		_delay_ms(3);
	}
	return;
}
 2d4:	08 95       	ret

000002d6 <main>:

//glowna funkcja
int main(void)
{
	unsigned char wybor=0;//domyslnie pokazuje godziny i minuty
	DDRB=0xff;//wyjscie
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	84 b9       	out	0x04, r24	; 4
	DDRD=0xff;//wyjscie
 2da:	8a b9       	out	0x0a, r24	; 10
	DDRC=0b110000;//wejscie (przyciski)
 2dc:	80 e3       	ldi	r24, 0x30	; 48
 2de:	87 b9       	out	0x07, r24	; 7
	PORTC=0b001111;//pull-upy
 2e0:	8f e0       	ldi	r24, 0x0F	; 15
 2e2:	88 b9       	out	0x08, r24	; 8
	PCICR|=(1<<PCIE1);// set PCIE0 to enable PCMSK0 scan
 2e4:	e8 e6       	ldi	r30, 0x68	; 104
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	82 60       	ori	r24, 0x02	; 2
 2ec:	80 83       	st	Z, r24
	PCMSK1|=(1<<PCINT11);// set PCINT0 to trigger an interrupt on state change
 2ee:	ec e6       	ldi	r30, 0x6C	; 108
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	88 60       	ori	r24, 0x08	; 8
 2f6:	80 83       	st	Z, r24
	sei();//wlaczenie przerwan
 2f8:	78 94       	sei
}

//glowna funkcja
int main(void)
{
	unsigned char wybor=0;//domyslnie pokazuje godziny i minuty
 2fa:	c0 e0       	ldi	r28, 0x00	; 0
	PCICR|=(1<<PCIE1);// set PCIE0 to enable PCMSK0 scan
	PCMSK1|=(1<<PCINT11);// set PCINT0 to trigger an interrupt on state change
	sei();//wlaczenie przerwan
	while(1)
	{//petle do liczenia czasu
		for (godzina1=0;godzina1<3;godzina1++)
 2fc:	c1 2c       	mov	r12, r1
										{
											wyslanieNaPort(1);
											wyslanieNaPort(2);
											wyslanieNaPort(3);
											wyslanieNaPort(4);
											wybor=0;
 2fe:	dc 2c       	mov	r13, r12
										{
											wyslanieNaPort(5);
											wyslanieNaPort(6);
											wyslanieNaPort(7);
											wyslanieNaPort(8);
											wybor=1;
 300:	bb 24       	eor	r11, r11
 302:	b3 94       	inc	r11
										{
											wyslanieNaPort(1);
											wyslanieNaPort(2);
											wyslanieNaPort(3);
											wyslanieNaPort(4);
											wybor=0;
 304:	0c 2d       	mov	r16, r12
 306:	ec 2c       	mov	r14, r12
										{
											wyslanieNaPort(5);
											wyslanieNaPort(6);
											wyslanieNaPort(7);
											wyslanieNaPort(8);
											wybor=1;
 308:	db 2d       	mov	r29, r11
	PCICR|=(1<<PCIE1);// set PCIE0 to enable PCMSK0 scan
	PCMSK1|=(1<<PCINT11);// set PCINT0 to trigger an interrupt on state change
	sei();//wlaczenie przerwan
	while(1)
	{//petle do liczenia czasu
		for (godzina1=0;godzina1<3;godzina1++)
 30a:	c0 92 0d 01 	sts	0x010D, r12	; 0x80010d <godzina1>
 30e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <godzina1>
 312:	83 30       	cpi	r24, 0x03	; 3
 314:	d0 f7       	brcc	.-12     	; 0x30a <main+0x34>
										{
											wyslanieNaPort(1);
											wyslanieNaPort(2);
											wyslanieNaPort(3);
											wyslanieNaPort(4);
											wybor=0;
 316:	fe 2c       	mov	r15, r14
	sei();//wlaczenie przerwan
	while(1)
	{//petle do liczenia czasu
		for (godzina1=0;godzina1<3;godzina1++)
		{
			for (godzina2=0;godzina2<10;godzina2++)
 318:	d0 92 0f 01 	sts	0x010F, r13	; 0x80010f <godzina2>
 31c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <godzina2>
 320:	8a 30       	cpi	r24, 0x0A	; 10
 322:	08 f0       	brcs	.+2      	; 0x326 <main+0x50>
 324:	ac c0       	rjmp	.+344    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
										{
											wyslanieNaPort(1);
											wyslanieNaPort(2);
											wyslanieNaPort(3);
											wyslanieNaPort(4);
											wybor=0;
 326:	1f 2d       	mov	r17, r15
	{//petle do liczenia czasu
		for (godzina1=0;godzina1<3;godzina1++)
		{
			for (godzina2=0;godzina2<10;godzina2++)
			{
				if (godzina1==2 && godzina2==4)//zeby nie bylo godziny 24, lecz 0
 328:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <godzina1>
 32c:	82 30       	cpi	r24, 0x02	; 2
 32e:	71 f4       	brne	.+28     	; 0x34c <main+0x76>
 330:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <godzina2>
 334:	84 30       	cpi	r24, 0x04	; 4
 336:	51 f4       	brne	.+20     	; 0x34c <main+0x76>
				{
					godzina1=0;
 338:	00 93 0d 01 	sts	0x010D, r16	; 0x80010d <godzina1>
					godzina2=0;
 33c:	00 93 0f 01 	sts	0x010F, r16	; 0x80010f <godzina2>
					wyslanieNaPort(1);
 340:	8b 2d       	mov	r24, r11
 342:	0e 94 99 00 	call	0x132	; 0x132 <wyslanieNaPort>
					wyslanieNaPort(2);
 346:	82 e0       	ldi	r24, 0x02	; 2
 348:	0e 94 99 00 	call	0x132	; 0x132 <wyslanieNaPort>
				}
				
				for (minuta1=0;minuta1<6;minuta1++)
 34c:	00 93 07 01 	sts	0x0107, r16	; 0x800107 <minuta1>
 350:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <minuta1>
 354:	86 30       	cpi	r24, 0x06	; 6
 356:	08 f0       	brcs	.+2      	; 0x35a <main+0x84>
 358:	88 c0       	rjmp	.+272    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
				{
					for (minuta2=0;minuta2<10;minuta2++)
 35a:	e0 92 11 01 	sts	0x0111, r14	; 0x800111 <minuta2>
 35e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <minuta2>
 362:	8a 30       	cpi	r24, 0x0A	; 10
 364:	08 f0       	brcs	.+2      	; 0x368 <main+0x92>
 366:	77 c0       	rjmp	.+238    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
					{
						for (sekunda1=0;sekunda1<=5;sekunda1++)
 368:	e0 92 0c 01 	sts	0x010C, r14	; 0x80010c <sekunda1>
 36c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sekunda1>
 370:	86 30       	cpi	r24, 0x06	; 6
 372:	08 f0       	brcs	.+2      	; 0x376 <main+0xa0>
 374:	66 c0       	rjmp	.+204    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
						{
							for (sekunda2=0;sekunda2<=9;sekunda2++)
 376:	f0 92 13 01 	sts	0x0113, r15	; 0x800113 <sekunda2>
 37a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <sekunda2>
 37e:	8a 30       	cpi	r24, 0x0A	; 10
 380:	08 f0       	brcs	.+2      	; 0x384 <main+0xae>
 382:	55 c0       	rjmp	.+170    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
							{
								for (setna1=0;setna1<=9;setna1++)
 384:	f0 92 14 01 	sts	0x0114, r15	; 0x800114 <setna1>
 388:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <setna1>
 38c:	8a 30       	cpi	r24, 0x0A	; 10
 38e:	08 f0       	brcs	.+2      	; 0x392 <main+0xbc>
 390:	44 c0       	rjmp	.+136    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
								{
									for (setna2=0;setna2<=9;setna2++)
 392:	10 93 0e 01 	sts	0x010E, r17	; 0x80010e <setna2>
 396:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <setna2>
 39a:	8a 30       	cpi	r24, 0x0A	; 10
 39c:	a0 f5       	brcc	.+104    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
									{
										if (((PINC & (1<<PINC2))==0) || (wybor==1))
 39e:	32 9b       	sbis	0x06, 2	; 6
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <main+0xd0>
 3a2:	c1 30       	cpi	r28, 0x01	; 1
 3a4:	89 f4       	brne	.+34     	; 0x3c8 <main+0xf2>
										{
											wyslanieNaPort(5);
 3a6:	85 e0       	ldi	r24, 0x05	; 5
 3a8:	0e 94 99 00 	call	0x132	; 0x132 <wyslanieNaPort>
											wyslanieNaPort(6);
 3ac:	86 e0       	ldi	r24, 0x06	; 6
 3ae:	0e 94 99 00 	call	0x132	; 0x132 <wyslanieNaPort>
											wyslanieNaPort(7);
 3b2:	87 e0       	ldi	r24, 0x07	; 7
 3b4:	0e 94 99 00 	call	0x132	; 0x132 <wyslanieNaPort>
											wyslanieNaPort(8);
 3b8:	88 e0       	ldi	r24, 0x08	; 8
 3ba:	0e 94 99 00 	call	0x132	; 0x132 <wyslanieNaPort>
											wybor=1;
											PORTC|=0b010000;//zapalenie diody
 3be:	44 9a       	sbi	0x08, 4	; 8
										}
										if (((PINC & (1<<PINC1))==0) || (wybor==0))
 3c0:	31 9b       	sbis	0x06, 1	; 6
 3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <main+0xfa>
										{
											wyslanieNaPort(5);
											wyslanieNaPort(6);
											wyslanieNaPort(7);
											wyslanieNaPort(8);
											wybor=1;
 3c4:	cd 2f       	mov	r28, r29
 3c6:	14 c0       	rjmp	.+40     	; 0x3f0 <main+0x11a>
											PORTC|=0b010000;//zapalenie diody
										}
										if (((PINC & (1<<PINC1))==0) || (wybor==0))
 3c8:	31 9b       	sbis	0x06, 1	; 6
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <main+0xfa>
 3cc:	c1 11       	cpse	r28, r1
 3ce:	10 c0       	rjmp	.+32     	; 0x3f0 <main+0x11a>
										{
											wyslanieNaPort(1);
 3d0:	8d 2f       	mov	r24, r29
 3d2:	0e 94 99 00 	call	0x132	; 0x132 <wyslanieNaPort>
											wyslanieNaPort(2);
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	0e 94 99 00 	call	0x132	; 0x132 <wyslanieNaPort>
											wyslanieNaPort(3);
 3dc:	83 e0       	ldi	r24, 0x03	; 3
 3de:	0e 94 99 00 	call	0x132	; 0x132 <wyslanieNaPort>
											wyslanieNaPort(4);
 3e2:	84 e0       	ldi	r24, 0x04	; 4
 3e4:	0e 94 99 00 	call	0x132	; 0x132 <wyslanieNaPort>
											wybor=0;
											PORTC&=0b101111;//zgaszenie diody
 3e8:	88 b1       	in	r24, 0x08	; 8
 3ea:	8f 72       	andi	r24, 0x2F	; 47
 3ec:	88 b9       	out	0x08, r24	; 8
										{
											wyslanieNaPort(1);
											wyslanieNaPort(2);
											wyslanieNaPort(3);
											wyslanieNaPort(4);
											wybor=0;
 3ee:	c1 2f       	mov	r28, r17
											PORTC&=0b101111;//zgaszenie diody
										}
										wyswietlaj();
 3f0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <wyswietlaj>
						{
							for (sekunda2=0;sekunda2<=9;sekunda2++)
							{
								for (setna1=0;setna1<=9;setna1++)
								{
									for (setna2=0;setna2<=9;setna2++)
 3f4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <setna2>
 3f8:	8f 5f       	subi	r24, 0xFF	; 255
 3fa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <setna2>
 3fe:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <setna2>
 402:	8a 30       	cpi	r24, 0x0A	; 10
 404:	60 f2       	brcs	.-104    	; 0x39e <main+0xc8>
					{
						for (sekunda1=0;sekunda1<=5;sekunda1++)
						{
							for (sekunda2=0;sekunda2<=9;sekunda2++)
							{
								for (setna1=0;setna1<=9;setna1++)
 406:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <setna1>
 40a:	8f 5f       	subi	r24, 0xFF	; 255
 40c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <setna1>
 410:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <setna1>
 414:	8a 30       	cpi	r24, 0x0A	; 10
 416:	08 f4       	brcc	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 418:	bc cf       	rjmp	.-136    	; 0x392 <main+0xbc>
				{
					for (minuta2=0;minuta2<10;minuta2++)
					{
						for (sekunda1=0;sekunda1<=5;sekunda1++)
						{
							for (sekunda2=0;sekunda2<=9;sekunda2++)
 41a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <sekunda2>
 41e:	8f 5f       	subi	r24, 0xFF	; 255
 420:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <sekunda2>
 424:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <sekunda2>
 428:	8a 30       	cpi	r24, 0x0A	; 10
 42a:	08 f4       	brcc	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42c:	ab cf       	rjmp	.-170    	; 0x384 <main+0xae>
				
				for (minuta1=0;minuta1<6;minuta1++)
				{
					for (minuta2=0;minuta2<10;minuta2++)
					{
						for (sekunda1=0;sekunda1<=5;sekunda1++)
 42e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sekunda1>
 432:	8f 5f       	subi	r24, 0xFF	; 255
 434:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <sekunda1>
 438:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sekunda1>
 43c:	86 30       	cpi	r24, 0x06	; 6
 43e:	08 f4       	brcc	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 440:	9a cf       	rjmp	.-204    	; 0x376 <main+0xa0>
					wyslanieNaPort(2);
				}
				
				for (minuta1=0;minuta1<6;minuta1++)
				{
					for (minuta2=0;minuta2<10;minuta2++)
 442:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <minuta2>
 446:	8f 5f       	subi	r24, 0xFF	; 255
 448:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <minuta2>
 44c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <minuta2>
 450:	8a 30       	cpi	r24, 0x0A	; 10
 452:	08 f4       	brcc	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 454:	89 cf       	rjmp	.-238    	; 0x368 <main+0x92>
					godzina2=0;
					wyslanieNaPort(1);
					wyslanieNaPort(2);
				}
				
				for (minuta1=0;minuta1<6;minuta1++)
 456:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <minuta1>
 45a:	8f 5f       	subi	r24, 0xFF	; 255
 45c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <minuta1>
 460:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <minuta1>
 464:	86 30       	cpi	r24, 0x06	; 6
 466:	08 f4       	brcc	.+2      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 468:	78 cf       	rjmp	.-272    	; 0x35a <main+0x84>
	sei();//wlaczenie przerwan
	while(1)
	{//petle do liczenia czasu
		for (godzina1=0;godzina1<3;godzina1++)
		{
			for (godzina2=0;godzina2<10;godzina2++)
 46a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <godzina2>
 46e:	8f 5f       	subi	r24, 0xFF	; 255
 470:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <godzina2>
 474:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <godzina2>
 478:	8a 30       	cpi	r24, 0x0A	; 10
 47a:	08 f4       	brcc	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47c:	55 cf       	rjmp	.-342    	; 0x328 <main+0x52>
	PCICR|=(1<<PCIE1);// set PCIE0 to enable PCMSK0 scan
	PCMSK1|=(1<<PCINT11);// set PCINT0 to trigger an interrupt on state change
	sei();//wlaczenie przerwan
	while(1)
	{//petle do liczenia czasu
		for (godzina1=0;godzina1<3;godzina1++)
 47e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <godzina1>
 482:	8f 5f       	subi	r24, 0xFF	; 255
 484:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <godzina1>
 488:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <godzina1>
 48c:	83 30       	cpi	r24, 0x03	; 3
 48e:	08 f4       	brcc	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 490:	43 cf       	rjmp	.-378    	; 0x318 <main+0x42>
 492:	3b cf       	rjmp	.-394    	; 0x30a <main+0x34>

00000494 <__vector_4>:
	return(0);
}

//przerwanie do ustawiania godziny
ISR (PCINT1_vect)//PCINT1 jest dla C
{
 494:	1f 92       	push	r1
 496:	0f 92       	push	r0
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	0f 92       	push	r0
 49c:	11 24       	eor	r1, r1
 49e:	2f 93       	push	r18
 4a0:	3f 93       	push	r19
 4a2:	4f 93       	push	r20
 4a4:	5f 93       	push	r21
 4a6:	6f 93       	push	r22
 4a8:	7f 93       	push	r23
 4aa:	8f 93       	push	r24
 4ac:	9f 93       	push	r25
 4ae:	af 93       	push	r26
 4b0:	bf 93       	push	r27
 4b2:	ef 93       	push	r30
 4b4:	ff 93       	push	r31
	//do obslugi przerwan na konkretnym pinie
	unsigned char changedbits;
	changedbits=PINC ^ portchistory;
 4b6:	96 b1       	in	r25, 0x06	; 6
 4b8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <portchistory>
	portchistory=PINC;
 4bc:	26 b1       	in	r18, 0x06	; 6
 4be:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <portchistory>

	if ((changedbits & (1<<PINC0))==1)
 4c2:	89 27       	eor	r24, r25
 4c4:	80 ff       	sbrs	r24, 0
 4c6:	62 c0       	rjmp	.+196    	; 0x58c <__vector_4+0xf8>
	{
		PORTC|=0b010000;//zapalenie diody
 4c8:	44 9a       	sbi	0x08, 4	; 8
		wyslanieNaPort(1);//zmiana na godziny i minuty w przypadku obserwowania sekund
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	0e 94 99 00 	call	0x132	; 0x132 <wyslanieNaPort>
		wyslanieNaPort(2);
 4d0:	82 e0       	ldi	r24, 0x02	; 2
 4d2:	0e 94 99 00 	call	0x132	; 0x132 <wyslanieNaPort>
		wyslanieNaPort(3);
 4d6:	83 e0       	ldi	r24, 0x03	; 3
 4d8:	0e 94 99 00 	call	0x132	; 0x132 <wyslanieNaPort>
		wyslanieNaPort(4);
 4dc:	84 e0       	ldi	r24, 0x04	; 4
 4de:	0e 94 99 00 	call	0x132	; 0x132 <wyslanieNaPort>
		while(1)
		{
			wyswietlajZmiana();//wyswietla na ekranie
 4e2:	0e 94 34 01 	call	0x268	; 0x268 <wyswietlajZmiana>
			if ((PINC & (1<<PINC1))==0)//zmienianie godziny
 4e6:	31 99       	sbic	0x06, 1	; 6
 4e8:	11 c0       	rjmp	.+34     	; 0x50c <__vector_4+0x78>
			{
				if (godzina2!=9)
 4ea:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <godzina2>
 4ee:	89 30       	cpi	r24, 0x09	; 9
 4f0:	31 f0       	breq	.+12     	; 0x4fe <__vector_4+0x6a>
				godzina2++;
 4f2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <godzina2>
 4f6:	8f 5f       	subi	r24, 0xFF	; 255
 4f8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <godzina2>
 4fc:	07 c0       	rjmp	.+14     	; 0x50c <__vector_4+0x78>
				else
				{
					godzina2=0;
 4fe:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <godzina2>
					godzina1++;
 502:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <godzina1>
 506:	8f 5f       	subi	r24, 0xFF	; 255
 508:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <godzina1>
				}
			}
			if ((PINC & (1<<PINC2))==0)//zmienianie minut
 50c:	32 99       	sbic	0x06, 2	; 6
 50e:	1d c0       	rjmp	.+58     	; 0x54a <__vector_4+0xb6>
			{
				if (minuta2!=9)
 510:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <minuta2>
 514:	89 30       	cpi	r24, 0x09	; 9
 516:	31 f0       	breq	.+12     	; 0x524 <__vector_4+0x90>
				minuta2++;
 518:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <minuta2>
 51c:	8f 5f       	subi	r24, 0xFF	; 255
 51e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <minuta2>
 522:	07 c0       	rjmp	.+14     	; 0x532 <__vector_4+0x9e>
				else
				{
					minuta2=0;
 524:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <minuta2>
					minuta1++;
 528:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <minuta1>
 52c:	8f 5f       	subi	r24, 0xFF	; 255
 52e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <minuta1>
				}
				if ((minuta1==6) && (minuta2==0))
 532:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <minuta1>
 536:	86 30       	cpi	r24, 0x06	; 6
 538:	41 f4       	brne	.+16     	; 0x54a <__vector_4+0xb6>
 53a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <minuta2>
 53e:	81 11       	cpse	r24, r1
 540:	04 c0       	rjmp	.+8      	; 0x54a <__vector_4+0xb6>
				{
					minuta1=0;
 542:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <minuta1>
					minuta2=0;
 546:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <minuta2>
				}
			}
			if (((PINC & (1<<PINC2))==0) || ((PINC & (1<<PINC1))==0))//zmiana wartosci na ekranie
 54a:	32 9b       	sbis	0x06, 2	; 6
 54c:	02 c0       	rjmp	.+4      	; 0x552 <__vector_4+0xbe>
 54e:	31 99       	sbic	0x06, 1	; 6
 550:	18 c0       	rjmp	.+48     	; 0x582 <__vector_4+0xee>
			{
				if ((godzina1==2) && (godzina2==4))
 552:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <godzina1>
 556:	82 30       	cpi	r24, 0x02	; 2
 558:	41 f4       	brne	.+16     	; 0x56a <__vector_4+0xd6>
 55a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <godzina2>
 55e:	84 30       	cpi	r24, 0x04	; 4
 560:	21 f4       	brne	.+8      	; 0x56a <__vector_4+0xd6>
				{
					godzina1=0;
 562:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <godzina1>
					godzina2=0;
 566:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <godzina2>
				}
				wyslanieNaPort(1);
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	0e 94 99 00 	call	0x132	; 0x132 <wyslanieNaPort>
				wyslanieNaPort(2);
 570:	82 e0       	ldi	r24, 0x02	; 2
 572:	0e 94 99 00 	call	0x132	; 0x132 <wyslanieNaPort>
				wyslanieNaPort(3);
 576:	83 e0       	ldi	r24, 0x03	; 3
 578:	0e 94 99 00 	call	0x132	; 0x132 <wyslanieNaPort>
				wyslanieNaPort(4);
 57c:	84 e0       	ldi	r24, 0x04	; 4
 57e:	0e 94 99 00 	call	0x132	; 0x132 <wyslanieNaPort>
			}
			if ((PINC & (1<<PINC3))==0)//wyjscie z ustawiania godziny
 582:	33 99       	sbic	0x06, 3	; 6
 584:	ae cf       	rjmp	.-164    	; 0x4e2 <__vector_4+0x4e>
			{
				PORTC&=0b101111;//zgaszenie diody
 586:	88 b1       	in	r24, 0x08	; 8
 588:	8f 72       	andi	r24, 0x2F	; 47
 58a:	88 b9       	out	0x08, r24	; 8
				break;
			}
		}
	}
 58c:	ff 91       	pop	r31
 58e:	ef 91       	pop	r30
 590:	bf 91       	pop	r27
 592:	af 91       	pop	r26
 594:	9f 91       	pop	r25
 596:	8f 91       	pop	r24
 598:	7f 91       	pop	r23
 59a:	6f 91       	pop	r22
 59c:	5f 91       	pop	r21
 59e:	4f 91       	pop	r20
 5a0:	3f 91       	pop	r19
 5a2:	2f 91       	pop	r18
 5a4:	0f 90       	pop	r0
 5a6:	0f be       	out	0x3f, r0	; 63
 5a8:	0f 90       	pop	r0
 5aa:	1f 90       	pop	r1
 5ac:	18 95       	reti

000005ae <__tablejump2__>:
 5ae:	ee 0f       	add	r30, r30
 5b0:	ff 1f       	adc	r31, r31
 5b2:	05 90       	lpm	r0, Z+
 5b4:	f4 91       	lpm	r31, Z
 5b6:	e0 2d       	mov	r30, r0
 5b8:	09 94       	ijmp

000005ba <_exit>:
 5ba:	f8 94       	cli

000005bc <__stop_program>:
 5bc:	ff cf       	rjmp	.-2      	; 0x5bc <__stop_program>
